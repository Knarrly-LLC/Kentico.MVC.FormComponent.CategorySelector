@using Kentico.Components.Web.Mvc.Dialogs
@using CMS.Helpers;

@model VisualAntidote.Kentico.MVC.FormComponent.CategorySelector.Models.ModalDialogs.CategorySelectModalDialogViewModel

<!-- Required Stylesheets -->
<link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css" rel="stylesheet">
<link href="~/Content/FormComponents/CategorySelectComponent/hummingbird-treeview.css" rel="stylesheet">


<!-- Required Javascript -->
<script src="https://code.jquery.com/jquery-3.4.1.min.js"></script>
<script src="~/Content/FormComponents/CategorySelectComponent/hummingbird-treeview.js"></script>


@helper GenerateCategoryList(IList<VisualAntidote.Kentico.MVC.FormComponent.CategorySelector.Models.ModalDialogs.CategorySelectItemViewModel> categories, int level = 1)
{
    var classUL = "";
    var idUL = "";

    if (level == 1)
    {
        classUL = "hummingbird-base";
        idUL = "treeview";
    }

    <ul id="@idUL" class="@classUL">
        @foreach (var c in categories)
        {
            var endNodeClass = "hummingbird-end-node";
            var expandIconClass = "";
            var leafStyle = "";

            if (c.Categories != null && c.Categories.Count() > 0)
            {
                expandIconClass = "fa fa-plus";
                endNodeClass = "parent-node";
            }
            else
            {
                leafStyle = "style=margin-left:21px;";
            }

            <li data-id="@level">
                <i class="@expandIconClass"></i>
                <span @leafStyle></span><label>
                    <input class="@endNodeClass" id="@c.GUID" name="categories-check-box" data-id="@c.CodeName" type="checkbox" />@CMS.Helpers.ResHelper.LocalizeString(c.DisplayName)
                </label>

                @if (c.Categories != null && c.Categories.Count() > 0)
                {
                    @GenerateCategoryList(c.Categories, (level + 1))
                }


            </li>
        }
    </ul>
}

<!DOCTYPE html>
<html>
<head>
    @Html.Kentico().ModalDialogScript()
    <meta name="viewport" content="width=device-width" />
</head>
<body>

    @if (Model.IsError)
    {
        <h2>@Model.ErrorMessage</h2>
    }


    <button class="btn btn-responsive  btn-primary" id="expandAll">Expand All</button>

    <button class="btn btn-responsive  btn-primary" id="collapseAll">Collapse All</button>

    <button class="btn btn-responsive  btn-primary" id="selectAll">Select All</button>

    <button class="btn btn-responsive  btn-primary" id="deselectAll">Deselect All</button>

    @{
        if (Model.MinimumSelectedCategoryNumber.HasValue && Model.MaximumSelectedCategoryNumber.HasValue)
        {
            <h3>Please select between @Model.MinimumSelectedCategoryNumber.Value and @Model.MaximumSelectedCategoryNumber.Value categories</h3>
        }
        else if (Model.MinimumSelectedCategoryNumber.HasValue)
        {
            <h3>Please select at least @Model.MinimumSelectedCategoryNumber.Value categories</h3>
        }
        else if (Model.MaximumSelectedCategoryNumber.HasValue)
        {
            <h3>Please select up to @Model.MaximumSelectedCategoryNumber.Value categories</h3>
        }
    }

    <form action="">
        <div id="treeview_container" class="hummingbird-treeview" style="overflow-y: scroll;">
            @GenerateCategoryList(Model.Categories)
        </div>
    </form>

    @* Script that preselects the check boxes button of the current categories
        Gets the value from the data passed when the 'kentico.modalDialog.open' function is called *@
    <script type="text/javascript">

        var minimumCategories = @Model.MinimumSelectedCategoryNumber.GetValueOrDefault(-1);
        var maximumCategories = @Model.MaximumSelectedCategoryNumber.GetValueOrDefault(-1);

        function customFunction() {

            var defaultValue = kentico.modalDialog.getData().value;
            var checkedArray = defaultValue.replace(/\s/g, "").split(',');

            $("#treeview").hummingbird();

            for (var i = 0; i < checkedArray.length; i++) {

                let checkThis = document.querySelectorAll("[data-id='" + checkedArray[i] + "']");

                if (checkThis && typeof checkThis[0] !== 'undefined') {
                    $("#treeview").hummingbird("checkNode", { attr: "data-id", name: checkedArray[i], expandParents: true });
                }
            }

            $('#expandAll').on("click", function () {
                $("#treeview").hummingbird('expandAll');
            });
            $('#collapseAll').on("click", function () {
                $("#treeview").hummingbird('collapseAll');
            });


            $('#selectAll').on("click", function () {
                $('#treeview').find(':checkbox').each(function () {
                    $("#treeview").hummingbird("checkNode", { attr: "id", name: jQuery(this).attr('id'), expandParents: false });
                });
            });



            $('#deselectAll').on("click", function () {
                $('#treeview').find(':checkbox').each(function () {
                    $("#treeview").hummingbird("uncheckNode", { attr: "id", name: jQuery(this).attr('id'), expandParents: false });
                });
            });

            $("#treeview").on("nodeChecked", function () {
                //let List = { "id": [], "dataid": [], "text": [] };
                //$("#treeview").hummingbird("getChecked", { list: List, onlyEndNodes: false, onlyParents: false, fromThis: false });
                //let listCount = List.id.length;

                //if (listCount >= maximumCategories) {

                //}
            });

        }

        if (document.readyState === "loading") {
            // Calls the function during the 'DOMContentLoaded' event, after the HTML document has been completely loaded
            document.addEventListener("DOMContentLoaded", function () {
                customFunction();
            });
        } else {
            // Calls the function directly in cases where the component is rendered dynamically after 'DOMContentLoaded' has occurred
            customFunction();
        }


    </script>
</body>
</html>