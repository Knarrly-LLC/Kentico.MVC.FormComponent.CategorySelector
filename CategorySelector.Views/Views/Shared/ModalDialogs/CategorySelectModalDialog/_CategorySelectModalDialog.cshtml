@using Kentico.Components.Web.Mvc.Dialogs
@using CMS.Helpers;

@model VisualAntidote.Kentico.MVC.FormComponent.CategorySelector.Models.ModalDialogs.CategorySelectModalDialogViewModel


@helper GenerateCategoryList(IList<VisualAntidote.Kentico.MVC.FormComponent.CategorySelector.Models.ModalDialogs.CategorySelectItemViewModel> categories, int level = 1)
{
    var classUL = "";
    var idUL = "";

    if (level == 1)
    {
        classUL = "hummingbird-base";
        idUL = "treeview";
    }

    <ul id="@idUL" class="@classUL">
        @foreach (var c in categories)
        {
            var endNodeClass = "hummingbird-end-node";
            var expandIconClass = "";
            var leafStyle = "";

            if (c.Categories != null && c.Categories.Count() > 0)
            {
                expandIconClass = "fa fa-plus";
                endNodeClass = "parent-node";
            }
            else
            {
                leafStyle = "style=margin-left:21px;";
            }

            <li data-id="@level">
                <i class="@expandIconClass"></i>
                <span @leafStyle></span><label>
                    <input class="@endNodeClass" id="@c.GUID" name="categories-check-box" data-id="@c.CodeName" type="checkbox" />@CMS.Helpers.ResHelper.LocalizeString(c.DisplayName)
                </label>

                @if (c.Categories != null && c.Categories.Count() > 0)
                {
                    @GenerateCategoryList(c.Categories, (level + 1))
                }


            </li>
        }
    </ul>
}

<!DOCTYPE html>
<html>
<head>
    @Html.Kentico().ModalDialogScript()

    <!-- Required Stylesheets -->
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css" rel="stylesheet">
    <link href="~/Content/FormComponents/CategorySelectComponent/hummingbird-treeview.css" rel="stylesheet">
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/3.4.1/css/bootstrap.min.css" integrity="sha384-HSMxcRTRxnN+Bdg0JdbxYKrThecOKuH5zCYotlSAcp1+c8xmyTe9GYg1l9a69psu" crossorigin="anonymous">

    <!-- Required Javascript -->
    <script src="https://code.jquery.com/jquery-3.4.1.min.js"></script>
    <script src="~/Content/FormComponents/CategorySelectComponent/hummingbird-treeview.js"></script>



    <meta name="viewport" content="width=device-width" />
    <style>
        body {
            font-family: Arial;
        }
    </style>
</head>
<body style="padding:20px;">

    @if (Model.IsError)
    {
        <h2>@Model.ErrorMessage</h2>
    }


    <button class="btn btn-responsive  btn-primary" id="expandAll">Expand All</button>

    <button class="btn btn-responsive  btn-primary" id="collapseAll">Collapse All</button>

    <button class="btn btn-responsive  btn-primary" id="selectAll">Select All</button>

    <button class="btn btn-responsive  btn-primary" id="deselectAll">Deselect All</button>

    @{
        if (Model.MinimumSelectedCategoryNumber.HasValue && Model.MaximumSelectedCategoryNumber.HasValue)
        {
            <h5>Please select between @Model.MinimumSelectedCategoryNumber.Value and @Model.MaximumSelectedCategoryNumber.Value categories</h5>
        }
        else if (Model.MinimumSelectedCategoryNumber.HasValue && Model.MinimumSelectedCategoryNumber.Value > 0)
        {
            <h5>Please select at least @Model.MinimumSelectedCategoryNumber.Value categories</h5>
        }
        else if (Model.MaximumSelectedCategoryNumber.HasValue)
        {
            <h5>Please select up to @Model.MaximumSelectedCategoryNumber.Value categories</h5>
        }
    }

    <div class="alert alert-info" style="color:navy;">
        <span id="category-select-modal-number-selected"></span> categories selected
    </div>

    <div class="alert alert-danger" id="category-select-modal-error" style="color:red;">

    </div>

    <form action="">
        <div id="treeview_container" class="hummingbird-treeview" style="overflow-y: scroll;">
            @GenerateCategoryList(Model.Categories)
        </div>
    </form>

    @* Script that preselects the check boxes button of the current categories
        Gets the value from the data passed when the 'kentico.modalDialog.open' function is called *@
    <script type="text/javascript">

        var minimumCategories = @Model.MinimumSelectedCategoryNumber.GetValueOrDefault(-1);
        var maximumCategories = @Model.MaximumSelectedCategoryNumber.GetValueOrDefault(-1);

        function customFunction() {

            var defaultValue = kentico.modalDialog.getData().value;
            var checkedArray = defaultValue.replace(/\s/g, "").split(',');

            $("#treeview").hummingbird();

            for (var i = 0; i < checkedArray.length; i++) {

                let checkThis = document.querySelectorAll("[data-id='" + checkedArray[i] + "']");

                if (checkThis && typeof checkThis[0] !== 'undefined') {
                    $("#treeview").hummingbird("checkNode", { attr: "data-id", name: checkedArray[i], expandParents: true });
                }
            }

            // Set up the button that expands all nodes in the entire category tree
            $('#expandAll').on("click", function () {
                $("#treeview").hummingbird('expandAll');
            });

            // Set up the button that collapses all nodes in the entire category tree
            $('#collapseAll').on("click", function () {
                $("#treeview").hummingbird('collapseAll');
            });

            // Set up the button that selects(checks) all nodes in the entire category tree
            $('#selectAll').on("click", function () {
                $('#treeview').find(':checkbox').each(function () {
                    $("#treeview").hummingbird("checkNode", { attr: "id", name: jQuery(this).attr('id'), expandParents: false });
                });
            });

            // Set up the button that deselects(unchecks) all nodes in the entire category tree
            $('#deselectAll').on("click", function () {
                $('#treeview').find(':checkbox').each(function () {
                    $("#treeview").hummingbird("uncheckNode", { attr: "id", name: jQuery(this).attr('id'), expandParents: false });
                });
            });

            // Check validation upon selection change.
            $("#treeview").on("CheckUncheckDone", function () {
                ValidateCategorySelection();
            });

            ValidateCategorySelection(); // Run validation on load.

        }

        let categoryErrorMessageElement = window.document.querySelector('#category-select-modal-error');

        function ValidateCategorySelection() {
            // Do validation on max categories only if max is set (-1 if not set)
            if (maximumCategories > -1 || minimumCategories > -1) {
                let List = { "id": [], "dataid": [], "text": [] };
                // Get total number of categories checked already
                $("#treeview").hummingbird("getChecked", { list: List, onlyEndNodes: false, onlyParents: false, fromThis: false });
                let listCount = List.id.length;

                // update selected count
                categorySelectedCountElement = window.document.querySelector('#category-select-modal-number-selected');
                categorySelectedCountElement.innerHTML = listCount;

                // reset error message
                categoryErrorMessageElement.innerHTML = '';
                categoryErrorMessageElement.style.display = "none";

                // Validate max
                if (maximumCategories > -1) {
                    if (listCount >= maximumCategories) {
                        categoryErrorMessageElement.style.display = "block";
                        categoryErrorMessageElement.innerHTML += "Maximum categories selected. ";
                        SetStateOfUncheckedNodes(false);
                    }
                    else {
                        SetStateOfUncheckedNodes(true);
                    }
                }

                if (minimumCategories > -1) {
                    if (listCount < minimumCategories) {
                        categoryErrorMessageElement.style.display = "block";
                        categoryErrorMessageElement.innerHTML += "Must select at least " + minimumCategories + ". ";
                    }
                }
            }
        }

        // Go through all unchecked nodes and enable/disable them. 
        // This is used when the maximum number of selections have been made to prevent user from going over. (Server-side validation still takes place.)
        function SetStateOfUncheckedNodes(enable) {
            let stateFunction = "disableNode";
            if (enable) {
                stateFunction = "enableNode"
            }
            var ListUnchecked = { "id": [], "dataid": [], "text": [] };
            $("#treeview").hummingbird("getUnchecked", { list: ListUnchecked, onlyEndNodes: false, onlyParents: false });
            for (const nodeId of ListUnchecked.id) {
                $("#treeview").hummingbird(stateFunction, { attr: "id", name: nodeId, state: false, disableChildren: false });
            }
        }

        if (document.readyState === "loading") {
            // Calls the function during the 'DOMContentLoaded' event, after the HTML document has been completely loaded
            document.addEventListener("DOMContentLoaded", function () {
                customFunction();
            });
        } else {
            // Calls the function directly in cases where the component is rendered dynamically after 'DOMContentLoaded' has occurred
            customFunction();
        }


    </script>
</body>
</html>